""""
This code is designed to connect to a Cisco IOS device, retrieve the IP interface brief information, extract all IP addresses from the output, and print them in a comma-separated format. Here's a detailed breakdown of what each part of the code does:
Import Libraries: It imports the netmiko library for network device communication and the re library for regular expression operations.
Device Connection Details: It sets up the connection details for the Cisco IOS device, including the IP address, username, password, device type, and port.
Connect to Device: It establishes a connection to the Cisco IOS device using the provided credentials and connection details.
Retrieve IP Interface Brief: It sends the sh ip int br command to the device to retrieve the IP interface brief information and stores it in the csr1kv1_ip_int_br variable.
Split Output by Line: It splits the output of the sh ip int br command into individual lines using the newline character as the delimiter and stores the result in the sh_ip_int_split list.
Define Regular Expression Pattern: It defines a regular expression pattern to match IP addresses in the format xxx.xxx.xxx.xxx
Extract IP Addresses: It initializes an empty string ip_string. It then iterates through each line in the sh_ip_int_split list, searches for IP addresses using the regular expression pattern, and appends any found IP addresses to the ip_string variable, separated by commas.
Print IP Addresses: Finally, it prints the ip_string variable, which contains all the extracted IP addresses in a comma-separated format.
In summary, this code connects to a Cisco IOS device, retrieves the IP interface brief information, extracts all IP addresses from the output, and prints them in a comma-separated format.
"""


import netmiko
import re

ip = '10.254.0.1'
username = 'cisco'
password = 'cisco'
device_type = 'cisco_ios'
port = '22'

net_connect = netmiko.ConnectHandler(ip=ip, device_type=device_type,
    username=username, password=password, port=port)
csr1kv1_ip_int_br = net_connect.send_command('sh ip int br')
#print(csr1kv1_ip_int_br)
#print(type(csr1kv1_ip_int_br))

#Split a string based on RegEx Pattern matching
sh_ip_int_split = re.split(r'\n', csr1kv1_ip_int_br)
#print(sh_ip_int_split)

regex_pattern = r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'
ip_string = str()

for value in sh_ip_int_split:
    ip = re.search(regex_pattern, value)
    if ip:
        ip_string += ip.group(0) + ','

print(ip_string)
